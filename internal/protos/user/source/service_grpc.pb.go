// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/user/source/service.proto

package uspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSourceServiceClient is the client API for UserSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSourceServiceClient interface {
	// Unary
	Destroy(ctx context.Context, in *UserDestroyRequest, opts ...grpc.CallOption) (*UserDestroyResponse, error)
	Update(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error)
	Store(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error)
	Find(ctx context.Context, in *UserFindRequest, opts ...grpc.CallOption) (*UserFindResponse, error)
}

type userSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSourceServiceClient(cc grpc.ClientConnInterface) UserSourceServiceClient {
	return &userSourceServiceClient{cc}
}

func (c *userSourceServiceClient) Destroy(ctx context.Context, in *UserDestroyRequest, opts ...grpc.CallOption) (*UserDestroyResponse, error) {
	out := new(UserDestroyResponse)
	err := c.cc.Invoke(ctx, "/user.source.service.UserSourceService/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSourceServiceClient) Update(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error) {
	out := new(UserUpdateResponse)
	err := c.cc.Invoke(ctx, "/user.source.service.UserSourceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSourceServiceClient) Store(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error) {
	out := new(UserStoreResponse)
	err := c.cc.Invoke(ctx, "/user.source.service.UserSourceService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSourceServiceClient) Find(ctx context.Context, in *UserFindRequest, opts ...grpc.CallOption) (*UserFindResponse, error) {
	out := new(UserFindResponse)
	err := c.cc.Invoke(ctx, "/user.source.service.UserSourceService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSourceServiceServer is the server API for UserSourceService service.
// All implementations should embed UnimplementedUserSourceServiceServer
// for forward compatibility
type UserSourceServiceServer interface {
	// Unary
	Destroy(context.Context, *UserDestroyRequest) (*UserDestroyResponse, error)
	Update(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	Store(context.Context, *UserStoreRequest) (*UserStoreResponse, error)
	Find(context.Context, *UserFindRequest) (*UserFindResponse, error)
}

// UnimplementedUserSourceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserSourceServiceServer struct {
}

func (UnimplementedUserSourceServiceServer) Destroy(context.Context, *UserDestroyRequest) (*UserDestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedUserSourceServiceServer) Update(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserSourceServiceServer) Store(context.Context, *UserStoreRequest) (*UserStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedUserSourceServiceServer) Find(context.Context, *UserFindRequest) (*UserFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}

// UnsafeUserSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSourceServiceServer will
// result in compilation errors.
type UnsafeUserSourceServiceServer interface {
	mustEmbedUnimplementedUserSourceServiceServer()
}

func RegisterUserSourceServiceServer(s grpc.ServiceRegistrar, srv UserSourceServiceServer) {
	s.RegisterService(&UserSourceService_ServiceDesc, srv)
}

func _UserSourceService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSourceServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.source.service.UserSourceService/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSourceServiceServer).Destroy(ctx, req.(*UserDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSourceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSourceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.source.service.UserSourceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSourceServiceServer).Update(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSourceService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSourceServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.source.service.UserSourceService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSourceServiceServer).Store(ctx, req.(*UserStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSourceService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSourceServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.source.service.UserSourceService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSourceServiceServer).Find(ctx, req.(*UserFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSourceService_ServiceDesc is the grpc.ServiceDesc for UserSourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.source.service.UserSourceService",
	HandlerType: (*UserSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Destroy",
			Handler:    _UserSourceService_Destroy_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserSourceService_Update_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _UserSourceService_Store_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _UserSourceService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user/source/service.proto",
}
