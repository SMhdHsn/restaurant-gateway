// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/user/source/service.proto

package uspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("protos/user/source/service.proto", fileDescriptor_7708e5e9f2f7ab4b) }

var fileDescriptor_7708e5e9f2f7ab4b = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x46, 0x05, 0x63, 0x84, 0xd9, 0x39, 0xee, 0xb2, 0x8a, 0xa2, 0x89, 0x6e, 0x26, 0xa0, 0x6f,
	0x20, 0xe2, 0x03, 0x18, 0x22, 0x58, 0x0a, 0xa5, 0x49, 0xee, 0x22, 0x9b, 0xcc, 0xf4, 0xde, 0x99,
	0x42, 0x1f, 0xa0, 0xef, 0x5d, 0x32, 0x3f, 0xa1, 0x2d, 0x99, 0xed, 0x3d, 0xe7, 0x3b, 0x09, 0x0c,
	0xcb, 0x15, 0x4a, 0x2d, 0xa9, 0x32, 0x04, 0x58, 0x91, 0x34, 0xd8, 0x41, 0x45, 0x80, 0xfb, 0xa1,
	0x03, 0x61, 0x11, 0x7f, 0x9c, 0x90, 0x70, 0x48, 0x78, 0x94, 0x3d, 0x2d, 0xcc, 0x10, 0x48, 0xc9,
	0x91, 0xfc, 0x2e, 0xcb, 0x17, 0x95, 0x9d, 0x01, 0xd2, 0xce, 0xf8, 0x38, 0xde, 0xb2, 0x87, 0x86,
	0x00, 0x6b, 0x0b, 0x6b, 0x97, 0xe6, 0x1b, 0x76, 0xff, 0x0d, 0xa4, 0x51, 0x1e, 0x78, 0x29, 0xce,
	0xbf, 0x1d, 0xc6, 0xd3, 0xc4, 0x1b, 0xbf, 0xee, 0x94, 0xbd, 0x5f, 0x89, 0xfe, 0x47, 0x2e, 0x4c,
	0x77, 0x7b, 0xbe, 0xe1, 0x6b, 0x96, 0x36, 0xaa, 0xdf, 0x6a, 0xe0, 0x45, 0xb4, 0xef, 0x84, 0x90,
	0x7f, 0x8b, 0xe7, 0x83, 0x38, 0xd7, 0xff, 0xd9, 0x5d, 0xad, 0x25, 0x02, 0x7f, 0x8d, 0xc6, 0x2d,
	0x0f, 0xed, 0x32, 0xde, 0xf6, 0xde, 0x9c, 0xfe, 0x63, 0xc9, 0xcf, 0x30, 0xf6, 0xfc, 0x25, 0x5a,
	0x9e, 0x70, 0x08, 0x17, 0xf1, 0xb0, 0xd3, 0x42, 0xf7, 0x2b, 0x5d, 0x25, 0x86, 0x54, 0xdb, 0xa6,
	0xf6, 0x59, 0x3e, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x62, 0xe9, 0x99, 0x14, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserSourceServiceClient is the client API for UserSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSourceServiceClient interface {
	// Unary
	Destroy(ctx context.Context, in *UserDestroyRequest, opts ...grpc.CallOption) (*UserDestroyResponse, error)
	Update(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error)
	Store(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error)
	Find(ctx context.Context, in *UserFindRequest, opts ...grpc.CallOption) (*UserFindResponse, error)
}

type userSourceServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserSourceServiceClient(cc *grpc.ClientConn) UserSourceServiceClient {
	return &userSourceServiceClient{cc}
}

func (c *userSourceServiceClient) Destroy(ctx context.Context, in *UserDestroyRequest, opts ...grpc.CallOption) (*UserDestroyResponse, error) {
	out := new(UserDestroyResponse)
	err := c.cc.Invoke(ctx, "/user.source.service.UserSourceService/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSourceServiceClient) Update(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error) {
	out := new(UserUpdateResponse)
	err := c.cc.Invoke(ctx, "/user.source.service.UserSourceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSourceServiceClient) Store(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error) {
	out := new(UserStoreResponse)
	err := c.cc.Invoke(ctx, "/user.source.service.UserSourceService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSourceServiceClient) Find(ctx context.Context, in *UserFindRequest, opts ...grpc.CallOption) (*UserFindResponse, error) {
	out := new(UserFindResponse)
	err := c.cc.Invoke(ctx, "/user.source.service.UserSourceService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSourceServiceServer is the server API for UserSourceService service.
type UserSourceServiceServer interface {
	// Unary
	Destroy(context.Context, *UserDestroyRequest) (*UserDestroyResponse, error)
	Update(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	Store(context.Context, *UserStoreRequest) (*UserStoreResponse, error)
	Find(context.Context, *UserFindRequest) (*UserFindResponse, error)
}

// UnimplementedUserSourceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserSourceServiceServer struct {
}

func (*UnimplementedUserSourceServiceServer) Destroy(ctx context.Context, req *UserDestroyRequest) (*UserDestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (*UnimplementedUserSourceServiceServer) Update(ctx context.Context, req *UserUpdateRequest) (*UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUserSourceServiceServer) Store(ctx context.Context, req *UserStoreRequest) (*UserStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (*UnimplementedUserSourceServiceServer) Find(ctx context.Context, req *UserFindRequest) (*UserFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}

func RegisterUserSourceServiceServer(s *grpc.Server, srv UserSourceServiceServer) {
	s.RegisterService(&_UserSourceService_serviceDesc, srv)
}

func _UserSourceService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSourceServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.source.service.UserSourceService/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSourceServiceServer).Destroy(ctx, req.(*UserDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSourceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSourceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.source.service.UserSourceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSourceServiceServer).Update(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSourceService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSourceServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.source.service.UserSourceService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSourceServiceServer).Store(ctx, req.(*UserStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSourceService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSourceServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.source.service.UserSourceService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSourceServiceServer).Find(ctx, req.(*UserFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.source.service.UserSourceService",
	HandlerType: (*UserSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Destroy",
			Handler:    _UserSourceService_Destroy_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserSourceService_Update_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _UserSourceService_Store_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _UserSourceService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user/source/service.proto",
}
