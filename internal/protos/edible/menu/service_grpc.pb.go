// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/edible/menu/service.proto

package empb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EdibleMenuServiceClient is the client API for EdibleMenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdibleMenuServiceClient interface {
	// Unary
	List(ctx context.Context, in *MenuListRequest, opts ...grpc.CallOption) (*MenuListResponse, error)
}

type edibleMenuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdibleMenuServiceClient(cc grpc.ClientConnInterface) EdibleMenuServiceClient {
	return &edibleMenuServiceClient{cc}
}

func (c *edibleMenuServiceClient) List(ctx context.Context, in *MenuListRequest, opts ...grpc.CallOption) (*MenuListResponse, error) {
	out := new(MenuListResponse)
	err := c.cc.Invoke(ctx, "/edible.menu.service.EdibleMenuService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdibleMenuServiceServer is the server API for EdibleMenuService service.
// All implementations should embed UnimplementedEdibleMenuServiceServer
// for forward compatibility
type EdibleMenuServiceServer interface {
	// Unary
	List(context.Context, *MenuListRequest) (*MenuListResponse, error)
}

// UnimplementedEdibleMenuServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEdibleMenuServiceServer struct {
}

func (UnimplementedEdibleMenuServiceServer) List(context.Context, *MenuListRequest) (*MenuListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeEdibleMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdibleMenuServiceServer will
// result in compilation errors.
type UnsafeEdibleMenuServiceServer interface {
	mustEmbedUnimplementedEdibleMenuServiceServer()
}

func RegisterEdibleMenuServiceServer(s grpc.ServiceRegistrar, srv EdibleMenuServiceServer) {
	s.RegisterService(&EdibleMenuService_ServiceDesc, srv)
}

func _EdibleMenuService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdibleMenuServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edible.menu.service.EdibleMenuService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdibleMenuServiceServer).List(ctx, req.(*MenuListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EdibleMenuService_ServiceDesc is the grpc.ServiceDesc for EdibleMenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdibleMenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edible.menu.service.EdibleMenuService",
	HandlerType: (*EdibleMenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _EdibleMenuService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/edible/menu/service.proto",
}
